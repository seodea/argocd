apiVersion: argoproj.io/v1alpha1
kind: Rollout # Rollout으로 생성
metadata:
  name: canary-rollout
spec:
  replicas: 4
  #revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: canary
  template:
    metadata:
      labels:
        app: canary
    spec:
      containers:
      - name: canary-rollouts-demo
        image: particule/simplecolorapi:2.0 # 1.0 = red , 2.0 = blue, 3.0 = black
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
  # 이 부분에서 카나리로 지정
  strategy:
    canary:
      maxSurge: "25%"    # 마지막 setWeight 이후 최대 Rollout 될 pod 비율 정의
      maxUnavailable: 0  # 업데이트 될 때 사용할 수 없는 pod의 최대 수
      canaryService: canary-service
      stableService: stable-service
      trafficRouting:
        alb:
          ingress: canary-ingress # fill a ingress name out
          # Reference to a Service that the Ingress must target in one of the rules (optional).
          # If omitted, uses canary.stableService.
          rootService: root-service
          # Service port is the port which the Service listens on (required).
          servicePort: 80
          # stick session이 필요한 경우
          # stickinessConfig:
          #   enabled: true
          #   durationSeconds: 3600
      steps:
      - setWeight: 10    # 첫 번째 canary 배포 전략 + 총 수량의 10%로 Canary pod로 traffic 전달
      - pause: { duration: 1m }
      - setWeight: 20    # 두 번째 canary 배포 전략 + 총 수량의 30%로 Canary pod로 traffic 전달
      - pause: { duration: 2m }
      - setWeight: 30    # 세 번째 canary 배포 전략 + 총 수량의 50%로 Canary pod로 traffic 전달
      - pause: { duration: 5m }
      - pause: {} # 무기한 일시정지 진행

      # steps:
      # setCanaryScale 정의를 하면 setWeight에선 traffic만 조절
      # 1 canary pod (10% of spec.replicas)
      # - setCanaryScale:
      #     weight: 10 # (or replicas: 4)
      # 90% of traffic to the 1 canary pod
      # - setWeight: 90
      # - pause: {}